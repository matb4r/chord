# PEERSIM CHORD

CYCLES 10000 #10^6
SIZE 1000 #100
M 10
SUCC_SIZE 4

random.seed 123456789
simulation.endtime CYCLES
simulation.logtime 10^6

simulation.experiments 1

network.size SIZE

protocol.tr UniformRandomTransport
{
	mindelay 0
	maxdelay 0
}

protocol.my example.chord2.ChordProtocol
{
	transport tr
}

control.traffic example.chord2.TrafficGenerator
{
	protocol my
	step 1
	#step 100
	#from 100
	#until 201
	#step 100 
}


init.create example.chord2.ChordInitializer
{
	protocol my
	transport tr 
}

control.maintain example.chord2.ChordMaintainer
{
	step 500
}



control.observer example.chord2.ResultObserver
{
	protocol my
	#step 90000
	at CYCLES
	FINAL
}


control.lnkob example.chord2.LinkObserver
{
 protocol my 
 FINAL 
 at CYCLES
}


// control.dnet example.chord2.ChordDynamicNetwork
// {
// 	add 0
// #	add -25
// 	minsize 100
// #	maxsize 7000
// #	step 100000
// 	step 100
// 	init.0 example.chord2.ChordInitializer
// 	{      
// 		protocol my
// 		transport tr
// 	}
// }
